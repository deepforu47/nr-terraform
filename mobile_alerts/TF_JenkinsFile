
properties([
    parameters ([
        string(name: 'BRANCH_NAME', defaultValue: 'master', description: 'Brnach Name'),
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?'),
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Create or Destroy', 
            filterLength: 1, 
            filterable: true, 
            name: 'action', 
            randomName: 'choice-parameter-ENVIRONMENT', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return[\'Could not get Value\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: true, 
                    script: 
                        'return["apply","destroy"]'
                ]
            ]
        ]
    ])
])
pipeline {
    agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '2', artifactNumToKeepStr: '3'))
    }
    
    environment {
        NEW_RELIC_API_KEY=credentials('NR_API_KEY')
        NEW_RELIC_REGION=credentials('NR_Region')
        NEW_RELIC_ACCOUNT_ID=credentials('NR_ACC_ID')
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: '${BRANCH_NAME}',
                    url: 'https://github.com/deepforu47/nr-terraform'

                sh "ls -lat"
            }
        }
        stage('Plan') {
            steps {
                script {
                    currentBuild.displayName = params.version
                }
                dir('mobile_alerts')
                {
                    sh 'ls -lrth'
                    sh '/usr/local/bin/terraform init -input=false'
                    //sh '/usr/local/bin/terraform workspace select ${environment}'
                    sh "/usr/local/bin/terraform plan -out tfplan "
                    sh '/usr/local/bin/terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }

        stage('Approval for Apply') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove 
                }
            }
            steps {
                script {
                    dir('mobile_alerts')
                    {
                        def plan = readFile 'tfplan.txt'
                        input message: "Do you want to apply the plan?",
                            parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                    }
                }
            }
        }

        stage('Apply') {
           /* when {
                // Only say hello if a "greeting" is requested
                expression { params.action == 'apply' }
            } */
            steps {
                script {
                    //if(params.action == 'apply' AND params.autoApprove = true) 
                    //{
                        dir('mobile_alerts')
                        {
                            sh "/usr/local/bin/terraform apply"
                        }
                    //}
                }
            }
        }
 /*      stage('Approval for Destroy') {
            when {
                not {
                    equals expected: true, actual: params.autoApprove
                }
            }
            steps {
                script {
                    dir('mobile_alerts')
                    {
                        def plan = 'yes'
                        input message: "Do you want to destroy the plan?",
                            parameters: [text(name: 'Plan', description: 'Please review the plan', defaultValue: plan)]
                    }
                }
            }
        }
        stage('Destroy') {
            when {
                // Only say hello if a "greeting" is requested
                expression { params.action == 'destroy' }
            }           
            steps {
                script {
                    if(params.action == 'destroy' AND params.autoApprove = true) 
                    {
                        dir('mobile_alerts')
                        {
                            sh "/usr/local/bin/terraform destroy"
                        }
                    }
                }
            }
        } */
    }      

    post {
        always {
            dir('mobile_alerts')
            {
                archiveArtifacts artifacts: 'tfplan.txt'
            }
        }
    }
}